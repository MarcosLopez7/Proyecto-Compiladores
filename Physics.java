/* Generated By:JavaCC: Do not edit this line. Physics.java */
public class Physics implements PhysicsConstants {

  public static void main(String args[]) throws ParseException {
    try {
      Physics parser = new Physics(new java.io.FileInputStream(args[0]));
      parser.S();
    }
    catch(java.io.FileNotFoundException e)
    {
      System.out.println("El archivo no esta...");
    }
  }

  static final public void S() throws ParseException {
    jj_consume_token(START);
    label_1:
    while (true) {
      unaEstructura();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case POS:
      case IF:
      case FOR:
      case IMPR:
      case OBJ:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(END);
    jj_consume_token(0);
         System.out.println("Hemos acabado");
  }

  static final public void unaEstructura() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case POS:
    case OBJ:
      declara();
      break;
    case IF:
      If();
      break;
    case FOR:
      For();
      break;
    case IMPR:
      imprimir();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        System.out.println("una estructura");
  }

  static final public void declara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      jj_consume_token(ID);
      jj_consume_token(ASIGNA);
      jj_consume_token(ENTERO);
      break;
    case POS:
      jj_consume_token(POS);
      jj_consume_token(ID);
      jj_consume_token(ASIGNA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PABRE:
        jj_consume_token(PABRE);
        jj_consume_token(ENTERO);
        jj_consume_token(COMA);
        jj_consume_token(ENTERO);
        jj_consume_token(PCIERRA);
        break;
      case TPAR:
      case MHOR:
        funcion();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case OBJ:
      jj_consume_token(OBJ);
      jj_consume_token(ID);
      jj_consume_token(ASIGNA);
      jj_consume_token(PABRE);
      jj_consume_token(ID);
      jj_consume_token(COMA);
      jj_consume_token(ENTERO);
      jj_consume_token(COMA);
      jj_consume_token(ENTERO);
      jj_consume_token(COMA);
      jj_consume_token(ENTERO);
      jj_consume_token(PCIERRA);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        System.out.println("Una declaracion");
  }

  static final public void funcion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TPAR:
      jj_consume_token(TPAR);
      jj_consume_token(PABRE);
      jj_consume_token(ID);
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PCIERRA);
      break;
    case MHOR:
      jj_consume_token(MHOR);
      jj_consume_token(PABRE);
      jj_consume_token(ID);
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PCIERRA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        System.out.println("Una funcion");
  }

  static final public void imprimir() throws ParseException {
    jj_consume_token(IMPR);
    jj_consume_token(PABRE);
    jj_consume_token(CADENA);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(MAS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PCIERRA);
        System.out.println("Una impresion");
  }

  static final public void If() throws ParseException {
    jj_consume_token(IF);
    compara();
    jj_consume_token(DOSP);
    label_3:
    while (true) {
      unaEstructura();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case POS:
      case IF:
      case FOR:
      case IMPR:
      case OBJ:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(DONE);
        System.out.println("Un if");
  }

  static final public void compara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OPLOG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        System.out.println("Una comparacion");
  }

  static final public void For() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(ID);
    jj_consume_token(TO);
    jj_consume_token(ENTERO);
    jj_consume_token(DOSP);
    label_4:
    while (true) {
      unaEstructura();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case POS:
      case IF:
      case FOR:
      case IMPR:
      case OBJ:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(DONE);
        System.out.println("Un for");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PhysicsTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2441c00,0x2441c00,0x1800040,0x2000c00,0x8000020,0x8000020,0x1800000,0x100,0x18000020,0x2441c00,0x8000020,0x8000020,0x2441c00,};
   }

  /** Constructor with InputStream. */
  public Physics(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Physics(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PhysicsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Physics(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PhysicsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Physics(PhysicsTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PhysicsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
